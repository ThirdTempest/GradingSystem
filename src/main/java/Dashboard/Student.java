/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Dashboard;

import Login.Database;
import Login.Login;
import Resource.HoverAnimation;
import SessionID.*;
import Validation.GradeInputFilter;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultCellEditor;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.text.AbstractDocument;

/**
 *
 * @author User
 */
public class Student extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    String section;
    String id;
    String first;
    String middle;
    String last;
    String subjectname;

    public Student() {
        initComponents();
        conn = Database.conn();
        ImageIcon logo = new ImageIcon(getClass().getResource("/Resource/aclclogo.png")); // image
        jimage.setIcon(logo);
        ImageIcon icon = new ImageIcon(getClass().getResource("/Resource/aclcicon.png"));
        setIconImage(icon.getImage());
        tablestudent(SessionSubject.SubjectID);//displaying data in Jtable
        HoverAnimation.HoverAnimationSection(jaddcolumn);
        HoverAnimation.HoverAnimationSection(jupdatestatus);

    }

    Student(String subjectname, String section, String id, String first, String middle, String last) {
        this();
        jsubjectname.setText(subjectname);
        jsectionname.setText(section);
        this.subjectname = subjectname;
        this.section = section;
        this.id = id;
        this.first = first;
        this.middle = middle;
        this.last = last;
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                new Subject(section, id, first, middle, last).setVisible(true);
                dispose();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jback = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jsubjectname = new javax.swing.JLabel();
        jimage = new javax.swing.JLabel();
        jsectionname = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jaddcolumn = new javax.swing.JButton();
        jupdatestatus = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Student's Grade");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 90, 172));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Student ID", "Student Code", "Student", "Total Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(30);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 830, 660));

        jback.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jback.setText("Back");
        jback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbackActionPerformed(evt);
            }
        });
        getContentPane().add(jback, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 693, 110, 50));

        jPanel1.setBackground(new java.awt.Color(0, 90, 172));

        jsubjectname.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jsubjectname.setText("Subject(NAME)");

        jimage.setText("jLabel1");

        jsectionname.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jsectionname.setText("Section(name)");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setText("|");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jimage, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84)
                .addComponent(jsectionname)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jsubjectname)
                .addContainerGap(226, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jsubjectname)
                    .addComponent(jsectionname)
                    .addComponent(jLabel2))
                .addContainerGap(59, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jimage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 140));

        jPanel2.setBackground(new java.awt.Color(0, 71, 171));

        jaddcolumn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jaddcolumn.setText("Add Column");
        jaddcolumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jaddcolumnActionPerformed(evt);
            }
        });

        jupdatestatus.setText("Update Status");
        jupdatestatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jupdatestatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jupdatestatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jaddcolumn, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jaddcolumn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jupdatestatus, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(468, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 110, 170, 690));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped

    }//GEN-LAST:event_jTable1KeyTyped

    private void jaddcolumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jaddcolumnActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int subjectID = SessionSubject.SubjectID;

        String newColumnName = JOptionPane.showInputDialog("Enter new column name:");
        if (newColumnName == null || newColumnName.trim().isEmpty()) {
            return;
        }

        try {
            String insertAssessmentSQL = "INSERT INTO subjectassessment (SubjectID, AssessmentName) VALUES (?, ?)";
            pst = conn.prepareStatement(insertAssessmentSQL);
            pst.setInt(1, subjectID);
            pst.setString(2, newColumnName);
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error saving new assessment: " + ex.getMessage());
            return;
        }

        int totalGradeCol = model.findColumn("Total Grade");
        if (totalGradeCol == -1) {
            JOptionPane.showMessageDialog(null, "\"Total Grade\" column not found!");
            return;
        }

        Vector<String> newColumnNames = new Vector<>();
        for (int i = 0; i < model.getColumnCount(); i++) {
            if (i == totalGradeCol) {
                newColumnNames.add(newColumnName);
            }
            newColumnNames.add(model.getColumnName(i));
        }

        Vector<Vector<Object>> newData = new Vector<>();
        for (int row = 0; row < model.getRowCount(); row++) {
            Vector<Object> newRow = new Vector<>();
            boolean isDrop = "Drop".equalsIgnoreCase(String.valueOf(model.getValueAt(row, model.getColumnCount() - 1)));
            for (int col = 0; col < model.getColumnCount(); col++) {
                if (col == totalGradeCol) {
                    newRow.add(isDrop ? "Drop" : "");
                }
                newRow.add(model.getValueAt(row, col));
            }
            newData.add(newRow);
        }

        DefaultTableModel newModel = new DefaultTableModel(newData, newColumnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 0 || column == 1 || column == getColumnCount() - 1) {
                    return false;
                }
                Object totalGrade = getValueAt(row, getColumnCount() - 1);
                return !(totalGrade != null && totalGrade.toString().equalsIgnoreCase("Drop"));
            }
        };

        jTable1.setModel(newModel);
        jTable1.getColumnModel().getColumn(jTable1.getColumnCount() - 1).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    if (value != null && value instanceof String) {
                        String strVal = ((String) value).toLowerCase();
                        if (strVal.contains("passing")) {
                            c.setForeground(Color.GREEN.darker());
                        } else if (strVal.contains("fail")) {
                            c.setForeground(Color.RED);
                        } else {
                            c.setForeground(Color.BLACK);
                        }
                    } else {
                        c.setForeground(Color.BLACK);
                    }
                    return c;
                }
            });
        jTable1.setAutoCreateRowSorter(true);

        applyAssessmentEditors(jTable1);

        TableColumnModel columnModel = jTable1.getColumnModel();
        columnModel.getColumn(0).setMinWidth(0);
        columnModel.getColumn(0).setMaxWidth(0);
        columnModel.getColumn(0).setWidth(0);

        attachGradeSaveListener(newModel);
        recalculateAllTotals(newModel);

// Refresh Drop status rows after updating student status
        for (int row = 0; row < newModel.getRowCount(); row++) {
            Object status = newModel.getValueAt(row, newModel.getColumnCount() - 1);
            if ("Drop".equalsIgnoreCase(String.valueOf(status))) {
                for (int col = 2; col < newModel.getColumnCount() - 1; col++) {
                    newModel.setValueAt("", row, col);
                }
                newModel.setValueAt("Drop", row, newModel.getColumnCount() - 1);
            }
        }
    }//GEN-LAST:event_jaddcolumnActionPerformed

    private void jbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbackActionPerformed
        new Subject(this.section, this.id, this.first, this.middle, this.last).setVisible(true);//going back to Subject form
        this.setVisible(false);
    }//GEN-LAST:event_jbackActionPerformed

    private void jupdatestatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jupdatestatusActionPerformed
        int selectedRow = jTable1.getSelectedRow(); // assigning
        if (selectedRow != -1) {
            // Safely extract StudentID as integer
            int studentsubjectid = (int) jTable1.getValueAt(selectedRow, 0);
            int studentId = -1;

            try {
                String sql = "SELECT StudentID FROM studentsubject WHERE StudentSubjectID = ?";
                pst = conn.prepareStatement(sql);
                pst.setInt(1, studentsubjectid);
                rs = pst.executeQuery();

                if (rs.next()) {
                    studentId = rs.getInt("StudentID");
                } else {
                    JOptionPane.showMessageDialog(null, "StudentSubjectID not found.");
                    return;
                }

                try {
                    // Step 1: Get current status
                    String checkSql = "SELECT Status FROM student WHERE StudentID = ?";
                    pst = conn.prepareStatement(checkSql);
                    pst.setInt(1, studentId);
                    rs = pst.executeQuery();

                    if (rs.next()) {
                        String currentStatus = rs.getString("Status");

                        // Only allow "Drop" or clear (null)
                        String[] statusOptions = {"Drop", "Clear (Set to NULL)"};
                        String newStatus = (String) JOptionPane.showInputDialog(
                                null,
                                "Current Status: " + (currentStatus == null ? "None" : currentStatus) + "\nSelect new status:",
                                "Update Student Status",
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                statusOptions,
                                currentStatus
                        );

                        if (newStatus != null) {
                            String updateSql = "UPDATE student SET Status = ? WHERE StudentID = ?";
                            pst = conn.prepareStatement(updateSql);

                            if (newStatus.equals("Clear (Set to NULL)")) {
                                pst.setNull(1, java.sql.Types.VARCHAR);
                            } else {
                                pst.setString(1, newStatus); // Only "Drop"
                            }

                            pst.setInt(2, studentId);
                            pst.executeUpdate();

                            tablestudent(SessionSubject.SubjectID); // refresh table
                            JOptionPane.showMessageDialog(null, "Status updated to: " + (newStatus.equals("Clear (Set to NULL)") ? "NULL" : newStatus));
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Student not found.");
                    }

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Error updating status: " + e.getMessage());
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error retrieving StudentID: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a student first.");
        }
    }//GEN-LAST:event_jupdatestatusActionPerformed
    private void tablestudent(int subjectID) { //Display Table
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    if (column == 0 || column == 1 || column == 2 || column == getColumnCount() - 1) {
                        return false;
                    }
                    Object totalGrade = getValueAt(row, getColumnCount() - 1);
                    return !(totalGrade != null && totalGrade.toString().equalsIgnoreCase("Drop"));
                }
            };

            List<String> assessments = new ArrayList<>();
            try (PreparedStatement pstAssess = conn.prepareStatement("SELECT AssessmentName FROM subjectassessment WHERE SubjectID = ?")) {
                pstAssess.setInt(1, subjectID);
                try (ResultSet rsAssess = pstAssess.executeQuery()) {
                    while (rsAssess.next()) {
                        assessments.add(rsAssess.getString("AssessmentName"));
                    }
                }
            }

            model.addColumn("StudentSubjectID");
            model.addColumn("Student Code");
            model.addColumn("Student Name");
            for (String assessment : assessments) {
                model.addColumn(assessment);
            }
            model.addColumn("Total Grade");

            List<Object[]> dropRows = new ArrayList<>();

            try (PreparedStatement pstStudent = conn.prepareStatement(
                    "SELECT ss.StudentSubjectID, ss.StudentCode, CONCAT(s.FirstName, ' ', s.MiddleName, ' ', s.LastName) AS StudentName, s.Status "
                    + "FROM studentsubject ss JOIN student s ON ss.StudentID = s.StudentID WHERE ss.SubjectID = ?")) {

                pstStudent.setInt(1, subjectID);
                try (ResultSet rsStudent = pstStudent.executeQuery()) {
                    while (rsStudent.next()) {
                        int studentSubjectID = rsStudent.getInt("StudentSubjectID");
                        String studentCode = rsStudent.getString("StudentCode");
                        String studentName = rsStudent.getString("StudentName");
                        String status = rsStudent.getString("Status");

                        if (status == null || status.trim().isEmpty()) {
                            status = "";
                        }

                        Object[] row = new Object[3 + assessments.size() + 1];
                        row[0] = studentSubjectID;
                        row[1] = studentCode;
                        row[2] = studentName;
                        Arrays.fill(row, 3, 3 + assessments.size(), "");
                        row[row.length - 1] = status.equalsIgnoreCase("Drop") ? "Drop" : "";

                        if (status.equalsIgnoreCase("Drop")) {
                            dropRows.add(row);
                        } else {
                            model.addRow(row);
                        }
                    }
                }

                for (Object[] dropRow : dropRows) {
                    model.addRow(dropRow);
                }
            }

            for (int i = 0; i < model.getRowCount(); i++) {
                int studentSubjectID = Integer.parseInt(model.getValueAt(i, 0).toString());

                // Skip grade fetching and total grade calculation if status is Drop
                Object statusCell = model.getValueAt(i, model.getColumnCount() - 1);
                if (statusCell != null && statusCell.toString().equalsIgnoreCase("Drop")) {
                    continue;
                }

                try (PreparedStatement pstGrade = conn.prepareStatement("SELECT Assessment, Grade FROM studentgrade WHERE StudentSubjectID = ?")) {
                    pstGrade.setInt(1, studentSubjectID);
                    try (ResultSet rsGrade = pstGrade.executeQuery()) {
                        while (rsGrade.next()) {
                            String assessmentName = rsGrade.getString("Assessment");
                            String grade = rsGrade.getString("Grade");
                            for (int col = 2; col < model.getColumnCount() - 1; col++) {
                                if (model.getColumnName(col).equals(assessmentName)) {
                                    model.setValueAt(grade, i, col);
                                    break;
                                }
                            }
                        }
                    }
                }
                recalculateTotalGrade(model, i);
            }

            jTable1.setModel(model);
            jTable1.getColumnModel().getColumn(jTable1.getColumnCount() - 1).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    if (value != null && value instanceof String) {
                        String strVal = ((String) value).toLowerCase();
                        if (strVal.contains("passing")) {
                            c.setForeground(Color.GREEN.darker());
                        } else if (strVal.contains("fail")) {
                            c.setForeground(Color.RED);
                        } else {
                            c.setForeground(Color.BLACK);
                        }
                    } else {
                        c.setForeground(Color.BLACK);
                    }
                    return c;
                }
            });
            jTable1.setAutoCreateRowSorter(true);
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(0).setWidth(0);

            applyGradeInputFilters(jTable1, model);
            attachGradeSaveListener(model);

            jTable1.getDefaultEditor(Object.class).addCellEditorListener(new CellEditorListener() {
                @Override
                public void editingStopped(ChangeEvent e) {
                    int row = jTable1.getSelectedRow();
                    int column = jTable1.getSelectedColumn();
                    if (row >= 0 && column >= 2 && column < model.getColumnCount() - 1) {
                        try {
                            recalculateTotalGrade(model, row);
                            int studentSubjectID = Integer.parseInt(model.getValueAt(row, 0).toString());
                            String assessment = model.getColumnName(column);
                            String gradeValue = model.getValueAt(row, column).toString();

                            try (PreparedStatement pstCheck = conn.prepareStatement("SELECT GradeID FROM studentgrade WHERE StudentSubjectID = ? AND Assessment = ?")) {
                                pstCheck.setInt(1, studentSubjectID);
                                pstCheck.setString(2, assessment);
                                try (ResultSet rsCheck = pstCheck.executeQuery()) {
                                    if (rsCheck.next()) {
                                        int gradeID = rsCheck.getInt("GradeID");
                                        try (PreparedStatement pstUpdate = conn.prepareStatement("UPDATE studentgrade SET Grade = ? WHERE GradeID = ?")) {
                                            pstUpdate.setString(1, gradeValue);
                                            pstUpdate.setInt(2, gradeID);
                                            pstUpdate.executeUpdate();
                                        }
                                    } else {
                                        try (PreparedStatement pstInsert = conn.prepareStatement("INSERT INTO studentgrade (StudentSubjectID, Assessment, Grade) VALUES (?, ?, ?)")) {
                                            pstInsert.setInt(1, studentSubjectID);
                                            pstInsert.setString(2, assessment);
                                            pstInsert.setString(3, gradeValue);
                                            pstInsert.executeUpdate();
                                        }
                                    }
                                }
                            }

                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(null, "Error saving grade: " + ex.getMessage());
                        }
                    }
                }

                @Override
                public void editingCanceled(ChangeEvent e) {
                }
            });

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error initializing table: " + e.getMessage());
        }
    }

    private void attachGradeSaveListener(DefaultTableModel model) { // for grades
        model.addTableModelListener(e -> {
            int row = e.getFirstRow();
            int column = e.getColumn();

            // Only handle changes in grade columns
            if (row < 0 || column < 2 || column >= model.getColumnCount() - 1) {
                return;
            }

            Object valueObj = model.getValueAt(row, column);
            if (valueObj == null) {
                return;
            }

            try {
                Object idObj = model.getValueAt(row, 0);
                int studentSubjectID = (idObj instanceof Integer)
                        ? (Integer) idObj
                        : Integer.parseInt(idObj.toString());

                String assessment = model.getColumnName(column);
                String grade = valueObj.toString().trim();

                // ✅ Handle appending denominator if top row is like "20/20"
                if (row != 0 && grade.matches("^\\d+(\\.\\d+)?$")) {
                    Object topObj = model.getValueAt(0, column);
                    if (topObj != null) {
                        String topValue = topObj.toString().trim();
                        if (topValue.matches("^\\d+(\\.\\d+)?/\\d+(\\.\\d+)?$")) {
                            String denominator = topValue.split("/")[1];
                            String updatedGrade = grade + "/" + denominator;

                            SwingUtilities.invokeLater(() -> {
                                model.setValueAt(updatedGrade, row, column);
                            });
                        }
                    }
                }

                if (grade.isEmpty()) {
                    return;
                }

                try (PreparedStatement checkStmt = conn.prepareStatement(
                        "SELECT GradeID FROM studentgrade WHERE StudentSubjectID = ? AND Assessment = ?")) {
                    checkStmt.setInt(1, studentSubjectID);
                    checkStmt.setString(2, assessment);
                    try (ResultSet rs = checkStmt.executeQuery()) {
                        if (rs.next()) {
                            int gradeID = rs.getInt("GradeID");
                            try (PreparedStatement updateStmt = conn.prepareStatement(
                                    "UPDATE studentgrade SET Grade = ? WHERE GradeID = ?")) {
                                updateStmt.setString(1, grade);
                                updateStmt.setInt(2, gradeID);
                                updateStmt.executeUpdate();
                            }
                        } else {
                            try (PreparedStatement insertStmt = conn.prepareStatement(
                                    "INSERT INTO studentgrade (StudentSubjectID, Assessment, Grade) VALUES (?, ?, ?)")) {
                                insertStmt.setInt(1, studentSubjectID);
                                insertStmt.setString(2, assessment);
                                insertStmt.setString(3, grade);
                                insertStmt.executeUpdate();
                            }
                        }
                    }
                }

                recalculateTotalGrade(model, row); // from recalculateTotalGrade method BELOW

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error saving grade: " + ex.getMessage());
            }
        });
    }

    public void recalculateTotalGrade(DefaultTableModel model, int row) {
        double total = 0;
        int count = 0;
        int lastCol = model.getColumnCount() - 1;

        for (int i = 2; i < lastCol; i++) {
            Object valObj = model.getValueAt(row, i);
            if (valObj != null) {
                String val = valObj.toString().trim();
                try {
                    if (val.matches("^\\d+(\\.\\d+)?/\\d+(\\.\\d+)?$")) {
                        String[] parts = val.split("/");
                        double num = Double.parseDouble(parts[0]);
                        double denom = Double.parseDouble(parts[1]);
                        if (denom != 0) {
                            total += (num / denom) * 100.0;
                            count++;
                        }
                    } else if (val.matches("^\\d+(\\.\\d+)?$")) {
                        total += Double.parseDouble(val);
                        count++;
                    }
                } catch (NumberFormatException ignore) {
                }
            }
        }

        if (count > 0) {
            double average = total / count;
            String result = String.format("%.2f", average);
            result += average >= 75 ? " (Passing)" : " (Fail)";
            model.setValueAt(result, row, lastCol);
        } else {
            model.setValueAt("", row, lastCol);
        }
    }

    private void applyAssessmentEditors(JTable jTable) { // restriction
        int totalCols = jTable.getColumnCount();

        for (int col = 2; col < totalCols - 1; col++) {
            final int column = col;
            JTextField textField = new JTextField();
            ((AbstractDocument) textField.getDocument()).setDocumentFilter(new GradeInputFilter());

            DefaultCellEditor editor = new DefaultCellEditor(textField);
            editor.addCellEditorListener(new CellEditorListener() { //from CellEditorListner class from Validation package
                @Override
                public void editingStopped(ChangeEvent e) {
                    int row = jTable.getEditingRow();
                    if (row <= 0) {
                        return;
                    }

                    String value = textField.getText().trim();
                    if (value.matches("^\\d+(\\.\\d+)?$")) {
                        Object topObj = jTable.getValueAt(0, column);
                        if (topObj != null) {
                            String top = topObj.toString().trim();
                            if (top.matches("^\\d+(\\.\\d+)?/\\d+(\\.\\d+)?$")) {
                                String denominator = top.split("/")[1];
                                SwingUtilities.invokeLater(()
                                        -> jTable.setValueAt(value + "/" + denominator, row, column));
                            }
                        }
                    }
                }

                @Override
                public void editingCanceled(ChangeEvent e) {
                }
            });

            jTable.getColumnModel().getColumn(column).setCellEditor(editor);
        }
    }

    private void applyGradeInputFilters(JTable table, DefaultTableModel model) {//restriction 
        for (int col = 2; col < model.getColumnCount() - 1; col++) {
            JTextField textField = new JTextField();
            ((AbstractDocument) textField.getDocument()).setDocumentFilter(new GradeInputFilter()); // from GradeInputFilter class in Validation
            table.getColumnModel().getColumn(col).setCellEditor(new DefaultCellEditor(textField));
        }
    }

    public void recalculateAllTotals(DefaultTableModel model) {
        for (int row = 0; row < model.getRowCount(); row++) {
            Object status = model.getValueAt(row, model.getColumnCount() - 1);
            if (status != null && "Drop".equalsIgnoreCase(status.toString())) {
                continue; // Skip dropped students
            }
            recalculateTotalGrade(model, row);
        }
    }

    public int getStudentID(int StudentID) { // get StudentID
        String sql = "SELECT * FROM `studentsubject` WHERE `StudentID` = ?";

        try {
            pst = conn.prepareStatement(sql);
            pst.setInt(1, StudentID);
            rs = pst.executeQuery();

            if (rs.next()) {
                StudentID = rs.getInt("StudentID");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving StudentID: " + e.getMessage());
        }

        return StudentID;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Student.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Student.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Student.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Student.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Student().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jaddcolumn;
    private javax.swing.JButton jback;
    private javax.swing.JLabel jimage;
    private javax.swing.JLabel jsectionname;
    private javax.swing.JLabel jsubjectname;
    private javax.swing.JButton jupdatestatus;
    // End of variables declaration//GEN-END:variables
}
