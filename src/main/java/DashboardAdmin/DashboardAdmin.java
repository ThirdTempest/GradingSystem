/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package DashboardAdmin;

import Login.Database;
import Login.Login;
import Resource.HoverAnimation;
import SessionID.SessionTeacher;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class DashboardAdmin extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;

    public DashboardAdmin() {
        initComponents();
        ImageIcon logo = new ImageIcon(getClass().getResource("/Resource/aclclogo.png"));//Image
        jimage.setIcon(logo);
        ImageIcon icon = new ImageIcon(getClass().getResource("/Resource/aclcicon.png"));
        setIconImage(icon.getImage());
        HoverAnimation.HoverAnimationSection(jaddteacher);
        HoverAnimation.HoverAnimationSection(jedit);
        HoverAnimation.HoverAnimationSection(jupdateStatus);
        HoverAnimation.HoverAnimationSection(jassign);
        conn = Database.conn();
        table();
        jTable1.getColumnModel().getColumn(0).setMinWidth(0);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(0).setWidth(0);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int confirm = JOptionPane.showConfirmDialog(
                        null,
                        "Are you sure you want to log out and close this window?",
                        "Confirm Logout",
                        JOptionPane.YES_NO_OPTION
                );

                if (confirm == JOptionPane.YES_OPTION) {
                    new Login().setVisible(true);
                    dispose();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLogout = new javax.swing.JButton();
        jimage = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jusername = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jupdateStatus = new javax.swing.JButton();
        jedit = new javax.swing.JButton();
        jaddteacher = new javax.swing.JButton();
        jassign = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin Dashboard");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Middle Name", "Last Name", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(30);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 670, 490));

        jLogout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLogout.setText("Logout");
        jLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLogoutActionPerformed(evt);
            }
        });
        getContentPane().add(jLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 550, 100, 40));

        jimage.setText("jLabel1");
        getContentPane().add(jimage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 130));

        jPanel1.setBackground(new java.awt.Color(0, 90, 172));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setText("Welcome");

        jusername.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jusername.setText("Admin!");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(jLabel2)
                .addGap(50, 50, 50)
                .addComponent(jusername)
                .addContainerGap(317, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jusername))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 130));

        jPanel2.setBackground(new java.awt.Color(0, 71, 171));

        jupdateStatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jupdateStatus.setText("Update Status");
        jupdateStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jupdateStatusActionPerformed(evt);
            }
        });

        jedit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jedit.setText("Edit");
        jedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jeditActionPerformed(evt);
            }
        });

        jaddteacher.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jaddteacher.setText("Add Teacher");
        jaddteacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jaddteacherActionPerformed(evt);
            }
        });

        jassign.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jassign.setText("Assign");
        jassign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jassignActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jedit, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jassign, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jaddteacher, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jupdateStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jaddteacher, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jassign, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jedit, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jupdateStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(164, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 130, 160, 490));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jaddteacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jaddteacherActionPerformed
        new Registration().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jaddteacherActionPerformed

    private void jeditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jeditActionPerformed
        int selectedRow = jTable1.getSelectedRow(); // Deleting section
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a Teacher to edit.");
            return;
        }
        String TeacherID = jTable1.getValueAt(selectedRow, 0).toString();
        String query = "SELECT * FROM teacher WHERE TeacherID = ?";

        try {
            pst = conn.prepareStatement(query);
            pst.setString(1, TeacherID);
            rs = pst.executeQuery();

            if (rs.next()) {
                String id = rs.getString("TeacherID");
                String user = rs.getString("username");
                String pass = rs.getString("password");
                String first = rs.getString("FirstName");
                String middle = rs.getString("MiddleName");
                String last = rs.getString("LastName");
                String email = rs.getString("email");
                String phone = rs.getString("phonenumber");

                new RegistrationEdit(id, user, pass, first, middle, last, email, phone).setVisible(true);
                this.setVisible(false);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jeditActionPerformed

    private void jupdateStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jupdateStatusActionPerformed
        int selectedRow = jTable1.getSelectedRow(); // assigning
        if (selectedRow != -1) {
            String id = (String) jTable1.getValueAt(selectedRow, 0);
            try {
                // Step 1: Get current status
                String checkSql = "SELECT Status FROM teacher WHERE TeacherID = ?";
                pst = conn.prepareStatement(checkSql);
                pst.setString(1, id);
                rs = pst.executeQuery();

                if (rs.next()) {
                    String currentStatus = rs.getString("Status");
                    String newStatus = currentStatus.equalsIgnoreCase("Active") ? "Inactive" : "Active";

                    // Step 2: Update status
                    String updateSql = "UPDATE teacher SET Status = ? WHERE TeacherID = ?";
                    pst = conn.prepareStatement(updateSql);
                    pst.setString(1, newStatus);
                    pst.setString(2, id);
                    pst.executeUpdate();
                    table();

                    JOptionPane.showMessageDialog(null, "Status updated to: " + newStatus);
                } else {
                    JOptionPane.showMessageDialog(null, "Teacher not found.");
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error updating status: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a teacher first.");
        }
    }//GEN-LAST:event_jupdateStatusActionPerformed

    private void jLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLogoutActionPerformed
        new Login().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jLogoutActionPerformed

    private void jassignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jassignActionPerformed
        int selectedRow = jTable1.getSelectedRow(); // assigning
        if (selectedRow != -1) {
            String id = (String) jTable1.getValueAt(selectedRow, 0);
            String firstname = (String) jTable1.getValueAt(selectedRow, 1);
            String middlename = (String) jTable1.getValueAt(selectedRow, 2);
            String lastname = (String) jTable1.getValueAt(selectedRow, 3);

            try {
                String statusQuery = "SELECT Status FROM teacher WHERE TeacherID = ?";
                pst = conn.prepareStatement(statusQuery);
                pst.setInt(1, Integer.parseInt(id));
                rs = pst.executeQuery();

                if (rs.next()) {
                    String status = rs.getString("Status");
                    if (!"Active".equalsIgnoreCase(status)) {
                        JOptionPane.showMessageDialog(null, "This teacher is inactive and cannot be assigned.");
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Teacher not found.");
                    return;
                }

                // Proceed with assigning
                int TeacherID = getTeacherID(Integer.parseInt(id));
                SessionTeacher.loggedInTeacherId = TeacherID;
                new SemesterSelectionAdmin(id, firstname, middlename, lastname).setVisible(true);
                this.setVisible(false);

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error checking teacher status: " + e.getMessage());
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a teacher first.");
        }
    }//GEN-LAST:event_jassignActionPerformed

    private void table() {
        try {
            String sql = "SELECT * FROM `teacher`";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString(1), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(9)});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    public int getSectionID(int SectionID) { // get SectionID for SessionSection in SessionID. (SectionID) becomes static
        String sql = "SELECT * FROM `section` WHERE `SectionID` = ?";

        try {
            pst = conn.prepareStatement(sql);
            pst.setInt(1, SectionID);
            rs = pst.executeQuery();

            if (rs.next()) {
                SectionID = rs.getInt("SectionID");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving SubjectID: " + e.getMessage());
        }

        return SectionID;
    }

    public int getTeacherID(int TeacherID) { // for SessionTeacher class in SessionID package. (TeacherID) becomes static
        String sql = "SELECT * FROM `teacher` WHERE `TeacherID` = ?";

        try {
            pst = conn.prepareStatement(sql);
            pst.setInt(1, TeacherID);
            rs = pst.executeQuery();

            if (rs.next()) {
                TeacherID = rs.getInt("TeacherID");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving TeacherID: " + e.getMessage());
        }

        return TeacherID;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashboardAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashboardAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashboardAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashboardAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DashboardAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jLogout;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jaddteacher;
    private javax.swing.JButton jassign;
    private javax.swing.JButton jedit;
    private javax.swing.JLabel jimage;
    private javax.swing.JButton jupdateStatus;
    private javax.swing.JLabel jusername;
    // End of variables declaration//GEN-END:variables
}
